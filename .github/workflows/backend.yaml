name: BE cicd

on:
  push:
    branches:
      - main

jobs:
  check-changes:
    runs-on: ubuntu-latest
    steps:
    # Step 1: Checkout the repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Check for changes in backend folder
    - name: Check for changes in backend
      id: changes
      run: |
        # Check for changes in frontend or backend directories
        git fetch origin
        BACKEND_CHANGED=$(git diff --name-only HEAD~1 HEAD | grep "^backend/")

        # Print detected changes
        if [ ! -z "$BACKEND_CHANGED" ]; then
          echo "Backend changes detected:"
          echo "$BACKEND_CHANGED"
        fi

        # Set outputs for next steps
        if [ ! -z "$BACKEND_CHANGED" ]; then
          echo "::set-output name=changed::true"
        else
          echo "::set-output name=changed::false"
        fi

    # Step 3: Conditional execution based on changes
    - name: Proceed with pipeline if changes are detected
      if: steps.changes.outputs.changed == 'true'
      run: |
        echo "Changes detected in backend. Proceeding with pipeline..."

  setup_env:
    name: 1. Setting up environment
    runs-on: ubuntu-latest
    needs: check-changes
    steps:    
      - name: env setup
        run: |
          sudo apt-get update && sudo apt-get install -y git make bash

  scan_git_secrets:
    name: 2. Scanning Git Secrets
    runs-on: ubuntu-latest
    needs: setup_env
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install git secrets
        run: |
          echo "Installing Git Secrets"
          git clone https://github.com/awslabs/git-secrets.git
          cd git-secrets
          sudo make install
      - name: Scan Git Secrets
        run: |
          echo "Scanning Git Secrets"
          source ./backend/ops/ci/git-secrets.sh

  build_and_push_docker:
    name: 3. Build and Push backend Docker Image
    runs-on: ubuntu-latest
    needs: scan_git_secrets
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set DockerHub Credentials as Environment Variables
        env:
          DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: |
          echo "${DOCKER_HUB_PASSWORD}" | docker login -u "${DOCKER_HUB_USER}" --password-stdin
      - name: Set APP_TAG_PREFIX
        run: echo "APP_TAG_PREFIX=${{ secrets.APP_TAG_PREFIX }}" >> $GITHUB_ENV    
      - name: Build and Push Docker Image
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          APP_TAG_PREFIX: ${{ secrets.APP_TAG_PREFIX }}
          DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          export DOCKER_HUB_USER=${{ secrets.DOCKER_HUB_USER }}
          export DOCKER_HUB_PASSWORD=${{ secrets.DOCKER_HUB_PASSWORD }}
          bash ./backend/ops/ci/push-docker-image-dockerhub.sh ./backend

#   create_tag:
#     name: 4. Create Tag for Commit
#     runs-on: ubuntu-latest
#     needs: build_and_push_docker
#     env:
#       GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_ACCESS_TOKEN }}
#       GH_TAG_USER_EMAIL: ${{ secrets.GH_TAG_USER_EMAIL }}
#       GH_TAG_USERNAME: ${{ secrets.GH_TAG_USERNAME }}
#     steps:
#       - name: Create Git Tag
#         run: |
#           bash ./backend/ops/ci/create-tag.sh

#   deploy_to_server:
#     name: 5. Deploy to Server
#     runs-on: ubuntu-latest
#     needs: create_tag
#     steps:
#       - name: Deploy to Server via SSH
#         run: |
#           ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
#             cd /home/subhanshugupta0/atlys-task/backend
#             docker-compose pull
#             docker-compose up -d
#           EOF
